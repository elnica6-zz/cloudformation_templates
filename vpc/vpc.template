{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template creates a Multi-AZ, multi-tiered network VPC with managed NAT gateways in the public subnet for each Availability Zone. It also creates subnet groups for ElastiCache, RDS, and Redshift. You have the option of deploy to either 2 (the default), 3, or 4 Availability Zones and a 2 (the default) or 3 tiered network VPC.",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Availability Zone Configuration"
          },
          "Parameters": [
            "NumberOfAzs"
          ]
        },
        {
          "Label": {
            "default": "Network Configuration"
          },
          "Parameters": [
            "NumberOfNetworkTiers",
            "VpcName"
          ]
        }
      ],
      "ParameterLabels": {
        "NumberOfAzs": {
          "default": "Number of Availability Zones"
        },
        "NumberOfNetworkTiers": {
          "default": "Number of network tiers"
        },
        "VpcName": {
          "default": "VPC Name"
        }
      }
    }
  },
  "Parameters": {
    "NumberOfAzs": {
      "AllowedValues": [
        "2",
        "3",
        "4"
      ],
      "Default": "2",
      "Description": "Number of Availability Zones to use in the VPC. Ensure that the Region you are deploying to can support the number of AZs selected!",
      "Type": "String"
    },
    "NumberOfNetworkTiers": {
      "AllowedValues": [
        "2",
        "3"
      ],
      "Default": "2",
      "Description": "Number of network tiers to use in the VPC. You can create a 2 (private & public) or 3 (internal, private, & public) tiered network VPC. The internal subnet will have no outbound internet access. The private subnet will have outbound internet access via NAT Gateways. DB related subnet groups will be created in both internal and private subnets.",
      "Type": "String"
    },
    "VpcName": {
      "AllowedValues": [
        "lab01",
        "continuous-integration01",
        "system-integration01",
        "staging01",
        "production01"
      ],
      "Default": "lab01",
      "Description": "VPC Environment name.",
      "Type": "String"
    }
  },
  "Mappings": {
    "Static": {
      "All": {
        "S3Bucket": "myprivates3bucket",
        "InternalSubnetsNestedStackS3Key": "/cloudformation_templates/vpc/subnets/internal_subnets.template",
        "PrivateSubnetsNestedStackS3Key": "/cloudformation_templates/vpc/subnets/private_subnets.template",
        "PrivateSubnetsInternetRouteNestedStackS3Key": "/cloudformation_templates/vpc/subnets/private_subnets_internet_route.template",
        "PublicSubnetsNestedStackS3Key": "/cloudformation_templates/vpc/subnets/public_subnets.template",
        "ElastiCacheSubnetGroupNestedStackS3Key": "/cloudformation_templates/vpc/subnet_groups/elasticache_subnet_group.template",
        "RDSDBSubnetGroupNestedStackS3Key": "/cloudformation_templates/vpc/subnet_groups/rds_db_subnet_group.template",
        "RedshiftClusterSubnetGroupNestedStackS3Key": "/cloudformation_templates/vpc/subnet_groups/redshift_cluster_subnet_group.template",
        "RedshiftClusterPublicSubnetGroupNestedStackS3Key": "/cloudformation_templates/vpc/subnet_groups/redshift_cluster_public_subnet_group.template"
      }
    },
    "Vpc": {
      "lab01": {
        "InternalSubnetAz1Cidr": "10.0.0.0/20",
        "InternalSubnetAz2Cidr": "10.0.16.0/20",
        "InternalSubnetAz3Cidr": "10.0.32.0/20",
        "InternalSubnetAz4Cidr": "10.0.48.0/20",
        "PrivateSubnetAz1Cidr": "10.0.64.0/20",
        "PrivateSubnetAz2Cidr": "10.0.80.0/20",
        "PrivateSubnetAz3Cidr": "10.0.96.0/20",
        "PrivateSubnetAz4Cidr": "10.0.112.0/20",
        "PublicSubnetAz1Cidr": "10.0.128.0/24",
        "PublicSubnetAz2Cidr": "10.0.129.0/24",
        "PublicSubnetAz3Cidr": "10.0.130.0/24",
        "PublicSubnetAz4Cidr": "10.0.131.0/24",
        "VpcCidr": "10.0.0.0/16"
      },
      "continuous-integration01": {
        "InternalSubnetAz1Cidr": "10.1.0.0/20",
        "InternalSubnetAz2Cidr": "10.1.16.0/20",
        "InternalSubnetAz3Cidr": "10.1.32.0/20",
        "InternalSubnetAz4Cidr": "10.1.48.0/20",
        "PrivateSubnetAz1Cidr": "10.1.64.0/20",
        "PrivateSubnetAz2Cidr": "10.1.80.0/20",
        "PrivateSubnetAz3Cidr": "10.1.96.0/20",
        "PrivateSubnetAz4Cidr": "10.1.112.0/20",
        "PublicSubnetAz1Cidr": "10.1.128.0/24",
        "PublicSubnetAz2Cidr": "10.1.129.0/24",
        "PublicSubnetAz3Cidr": "10.1.130.0/24",
        "PublicSubnetAz4Cidr": "10.1.131.0/24",
        "VpcCidr": "10.1.0.0/16"
      },
      "system-integration01": {
        "InternalSubnetAz1Cidr": "10.2.0.0/20",
        "InternalSubnetAz2Cidr": "10.2.16.0/20",
        "InternalSubnetAz3Cidr": "10.2.32.0/20",
        "InternalSubnetAz4Cidr": "10.2.48.0/20",
        "PrivateSubnetAz1Cidr": "10.2.64.0/20",
        "PrivateSubnetAz2Cidr": "10.2.80.0/20",
        "PrivateSubnetAz3Cidr": "10.2.96.0/20",
        "PrivateSubnetAz4Cidr": "10.2.112.0/20",
        "PublicSubnetAz1Cidr": "10.2.128.0/24",
        "PublicSubnetAz2Cidr": "10.2.129.0/24",
        "PublicSubnetAz3Cidr": "10.2.130.0/24",
        "PublicSubnetAz4Cidr": "10.2.131.0/24",
        "VpcCidr": "10.2.0.0/16"
      },
      "staging01": {
        "InternalSubnetAz1Cidr": "10.3.0.0/20",
        "InternalSubnetAz2Cidr": "10.3.16.0/20",
        "InternalSubnetAz3Cidr": "10.3.32.0/20",
        "InternalSubnetAz4Cidr": "10.3.48.0/20",
        "PrivateSubnetAz1Cidr": "10.3.64.0/20",
        "PrivateSubnetAz2Cidr": "10.3.80.0/20",
        "PrivateSubnetAz3Cidr": "10.3.96.0/20",
        "PrivateSubnetAz4Cidr": "10.3.112.0/20",
        "PublicSubnetAz1Cidr": "10.3.128.0/24",
        "PublicSubnetAz2Cidr": "10.3.129.0/24",
        "PublicSubnetAz3Cidr": "10.3.130.0/24",
        "PublicSubnetAz4Cidr": "10.3.131.0/24",
        "VpcCidr": "10.3.0.0/16"
      },
      "production01": {
        "InternalSubnetAz1Cidr": "10.4.0.0/20",
        "InternalSubnetAz2Cidr": "10.4.16.0/20",
        "InternalSubnetAz3Cidr": "10.4.32.0/20",
        "InternalSubnetAz4Cidr": "10.4.48.0/20",
        "PrivateSubnetAz1Cidr": "10.4.64.0/20",
        "PrivateSubnetAz2Cidr": "10.4.80.0/20",
        "PrivateSubnetAz3Cidr": "10.4.96.0/20",
        "PrivateSubnetAz4Cidr": "10.4.112.0/20",
        "PublicSubnetAz1Cidr": "10.4.128.0/24",
        "PublicSubnetAz2Cidr": "10.4.129.0/24",
        "PublicSubnetAz3Cidr": "10.4.130.0/24",
        "PublicSubnetAz4Cidr": "10.4.131.0/24",
        "VpcCidr": "10.4.0.0/16"
      }
    }
  },
  "Conditions": {
    "3AzCondition": {
      "Fn::Or": [
        {
          "Fn::Equals": [
            {
              "Ref": "NumberOfAzs"
            },
            "3"
          ]
        },
        {
          "Condition": "4AzCondition"
        }
      ]
    },
    "4AzCondition": {
      "Fn::Equals": [
        {
          "Ref": "NumberOfAzs"
        },
        "4"
      ]
    },
    "3NetworkTierCondition": {
      "Fn::Equals": [
        {
          "Ref": "NumberOfNetworkTiers"
        },
        "3"
      ]
    },
    "3NetworkTierAnd3AzCondition": {
      "Fn::And": [
        {
          "Condition": "3NetworkTierCondition"
        },
        {
          "Condition": "3AzCondition"
        }
      ]
    },
    "3NetworkTierAnd4AzCondition": {
      "Fn::And": [
        {
          "Condition": "3NetworkTierCondition"
        },
        {
          "Condition": "4AzCondition"
        }
      ]
    }
  },
  "Resources": {
    "DhcpOptions": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              ".compute.internal"
            ]
          ]
        },
        "DomainNameServers": [
          "AmazonProvidedDNS"
        ],
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "VpcName"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "VpcName"
                  },
                  "_dhcpoptions_1"
                ]
              ]
            }
          }
        ]
      }
    },
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "Vpc",
            {
              "Ref": "VpcName"
            },
            "VpcCidr"
          ]
        },
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "VpcName"
            }
          },          {
            "Key": "Name",
            "Value": {
              "Ref": "VpcName"
            }
          }
        ]
      }
    },
    "VpcDhcpOptionsAssociation": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "DhcpOptionsId": {
          "Ref": "DhcpOptions"
        }
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [        
          {
            "Key": "Environment",
            "Value": {
              "Ref": "VpcName"
            }
          },
          {
            "Key": "Network",
            "Value": "public"
          }
        ]
      }
    },
    "VpcGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "InternalSubnetsNestedStack": {
      "Condition": "3NetworkTierCondition",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "S3Bucket"
                ]
              },
              ".s3.amazonaws.com",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "InternalSubnetsNestedStackS3Key"
                ]
              }
            ]
          ]
        },
        "Parameters": {
          "InternalSubnetAz1Cidr": {
            "Fn::FindInMap": [
              "Vpv",
              {
                "Ref": "VpcName"
              },
              "InternalSubnetAz1Cidr"
            ]
          },
          "InternalSubnetAz2Cidr": {
            "Fn::FindInMap": [
              "Vpc",
              {
                "Ref": "VpcName"
              },
              "InternalSubnetAz2Cidr"
            ]
          },
          "InternalSubnetAz3Cidr": {
            "Fn::FindInMap": [
              "Vpc",
              {
                "Ref": "VpcName"
              },
              "InternalSubnetAz3Cidr"
            ]
          },
          "InternalSubnetAz4Cidr": {
            "Fn::FindInMap": [
              "Vpc",
              {
                "Ref": "VpcName"
              },
              "InternalSubnetAz4Cidr"
            ]
          },
          "NumberOfAzs": {
            "Ref": "NumberOfAzs"
          },
          "Vpc": {
            "Ref": "Vpc"
          },
          "VpcName": {
            "Ref": "VpcName"
          }
        },
        "TimeoutInMinutes": "5"
      }
    },
    "PrivateSubnetsNestedStack": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "S3Bucket"
                ]
              },
              ".s3.amazonaws.com",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "PrivateSubnetsNestedStackS3Key"
                ]
              }
            ]
          ]
        },
        "Parameters": {
          "PrivateSubnetAz1Cidr": {
            "Fn::FindInMap": [
              "Vpc",
              {
                "Ref": "VpcName"
              },
              "PrivateSubnetAz1Cidr"
            ]
          },
          "PrivateSubnetAz2Cidr": {
            "Fn::FindInMap": [
              "Vpc",
              {
                "Ref": "VpcName"
              },
              "PrivateSubnetAz2Cidr"
            ]
          },
          "PrivateSubnetAz3Cidr": {
            "Fn::FindInMap": [
              "Vpc",
              {
                "Ref": "VpcName"
              },
              "PrivateSubnetAz3Cidr"
            ]
          },
          "PrivateSubnetAz4Cidr": {
            "Fn::FindInMap": [
              "Vpc",
              {
                "Ref": "VpcName"
              },
              "PrivateSubnetAz4Cidr"
            ]
          },
          "NumberOfAzs": {
            "Ref": "NumberOfAzs"
          },         
          "Vpc": {
            "Ref": "Vpc"
          },
          "VpcName": {
            "Ref": "VpcName"
          }
        },
        "TimeoutInMinutes": "5"
      }
    },
    "PrivateSubnetsInternetRouteNestedStack": {
      "DependsOn": [
        "PrivateSubnetsNestedStack",
        "PublicSubnetsNestedStack"
      ],
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "S3Bucket"
                ]
              },
              ".s3.amazonaws.com",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "PrivateSubnetsInternetRouteNestedStackS3Key"
                ]
              }
            ]
          ]
        },
        "Parameters": {
          "Vpc": {
            "Ref": "Vpc"
          },
          "VpcName": {
            "Ref": "VpcName"
          },
          "PrivateSubnetAz1RouteTableId": {
            "Fn::GetAtt": [
              "PrivateSubnetsNestedStack",
              "Outputs.PrivateSubnetAz1RouteTableId"
            ]
          },
          "PrivateSubnetAz2RouteTableId": {
            "Fn::GetAtt": [
              "PrivateSubnetsNestedStack",
              "Outputs.PrivateSubnetAz2RouteTableId"
            ]
          },
          "PrivateSubnetAz3RouteTableId": {
            "Fn::If": [
              "3AzCondition",
              {
                "Fn::GetAtt": [
                  "PrivateSubnetsNestedStack",
                  "Outputs.PrivateSubnetAz3RouteTableId"
                ]                
              },
              ""
            ]
          },
          "PrivateSubnetAz4RouteTableId": {
            "Fn::If": [
              "4AzCondition",
              {
                "Fn::GetAtt": [
                  "PrivateSubnetsNestedStack",
                  "Outputs.PrivateSubnetAz4RouteTableId"
                ]
              },
              ""              
            ]
          },
          "NATGateway1Id": {
            "Fn::GetAtt": [
              "PublicSubnetsNestedStack",
              "Outputs.NATGateway1Id"
            ]
          },
          "NATGateway2Id": {
            "Fn::GetAtt": [
              "PublicSubnetsNestedStack",
              "Outputs.NATGateway2Id"
            ]
          },
          "NATGateway3Id": {
            "Fn::If": [
              "3AzCondition",
              {
                "Fn::GetAtt": [
                  "PublicSubnetsNestedStack",
                  "Outputs.NATGateway3Id"
                ]
              },
              ""
            ]
          },
          "NATGateway4Id": {
            "Fn::If": [
              "4AzCondition",
              {
                "Fn::GetAtt": [
                  "PublicSubnetsNestedStack",
                  "Outputs.NATGateway4Id"
                ]
              },
              ""
            ]
          },
          "NumberOfAzs": {
            "Ref": "NumberOfAzs"
          }
        },
        "TimeoutInMinutes": "5"
      }
    },
    "PublicSubnetsNestedStack": {
      "DependsOn": "VpcGatewayAttachment",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "S3Bucket"
                ]
              },
              ".s3.amazonaws.com",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "PublicSubnetsNestedStackS3Key"
                ]
              }
            ]
          ]
        },
        "Parameters": {
          "InternetGatewayId": {
            "Ref": "InternetGateway"
          },
          "NumberOfAzs": {
            "Ref": "NumberOfAzs"
          },
          "PublicSubnetAz1Cidr": {
            "Fn::FindInMap": [
              "Vpc",
              {
                "Ref": "VpcName"
              },
              "PublicSubnetAz1Cidr"
            ]
          },
          "PublicSubnetAz2Cidr": {
            "Fn::FindInMap": [
              "Vpc",
              {
                "Ref": "VpcName"
              },
              "PublicSubnetAz2Cidr"
            ]
          },
          "PublicSubnetAz3Cidr": {
            "Fn::FindInMap": [
              "Vpc",
              {
                "Ref": "VpcName"
              },
              "PublicSubnetAz3Cidr"
            ]
          },
          "PublicSubnetAz4Cidr": {
            "Fn::FindInMap": [
              "Vpc",
              {
                "Ref": "VpcName"
              },
              "PublicSubnetAz4Cidr"
            ]
          },
          "Vpc": {
            "Ref": "Vpc"
          },
          "VpcName": {
            "Ref": "VpcName"
          }
        },
        "TimeoutInMinutes": "5"
      }
    },
    "ElastiCacheInternalSubnetGroupNestedStack": {
      "Condition": "3NetworkTierCondition",
      "DependsOn": "InternalSubnetsNestedStack",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "S3Bucket"
                ]
              },
              ".s3.amazonaws.com",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "ElastiCacheSubnetGroupNestedStackS3Key"
                ]
              }
            ]
          ]
        },
        "Parameters": {
          "SubnetAz1Id": {
            "Fn::GetAtt": [
              "InternalSubnetsNestedStack",
              "Outputs.InternalSubnetAz1Id"
            ]
          },
          "SubnetAz2Id": {
            "Fn::GetAtt": [
              "InternalSubnetsNestedStack",
              "Outputs.InternalSubnetAz2Id"
            ]
          },
          "SubnetAz3Id": {
            "Fn::If": [
              "3AzCondition",
              {
                "Fn::GetAtt": [
                  "InternalSubnetsNestedStack",
                  "Outputs.InternalSubnetAz3Id"
                ]
              },
              ""
            ]
          },
          "SubnetAz4Id": {
            "Fn::If": [
              "4AzCondition",
              {
                "Fn::GetAtt": [
                  "InternalSubnetsNestedStack",
                  "Outputs.InternalSubnetAz4Id"
                ]
              },
              ""
            ]
          },
          "NumberOfAzs": {
            "Ref": "NumberOfAzs"
          }
        },
        "TimeoutInMinutes": "5"
      }
    },
    "ElastiCachePrivateSubnetGroupNestedStack": {
      "DependsOn": "PrivateSubnetsNestedStack",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "S3Bucket"
                ]
              },
              ".s3.amazonaws.com",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "ElastiCacheSubnetGroupNestedStackS3Key"
                ]
              }
            ]
          ]
        },
        "Parameters": {
          "SubnetAz1Id": {
            "Fn::GetAtt": [
              "PrivateSubnetsNestedStack",
              "Outputs.PrivateSubnetAz1Id"
            ]
          },
          "SubnetAz2Id": {
            "Fn::GetAtt": [
              "PrivateSubnetsNestedStack",
              "Outputs.PrivateSubnetAz2Id"
            ]
          },
          "SubnetAz3Id": {
            "Fn::If": [
              "3AzCondition",
              {
                "Fn::GetAtt": [
                  "PrivateSubnetsNestedStack",
                  "Outputs.PrivateSubnetAz3Id"
                ]
              },
              ""
            ]
          },
          "SubnetAz4Id": {
            "Fn::If": [
              "4AzCondition",
              {
                "Fn::GetAtt": [
                  "PrivateSubnetsNestedStack",
                  "Outputs.PrivateSubnetAz4Id"
                ]
              },
              ""
            ]
          },
          "NumberOfAzs": {
            "Ref": "NumberOfAzs"
          }
        },
        "TimeoutInMinutes": "5"
      }
    },
    "RDSDBInternalSubnetGroupNestedStack": {
      "Condition": "3NetworkTierCondition",
      "DependsOn": "InternalSubnetsNestedStack",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "S3Bucket"
                ]
              },
              ".s3.amazonaws.com",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "RDSDBSubnetGroupNestedStackS3Key"
                ]
              }
            ]
          ]
        },
        "Parameters": {
          "SubnetAz1Id": {
            "Fn::GetAtt": [
              "InternalSubnetsNestedStack",
              "Outputs.InternalSubnetAz1Id"
            ]
          },
          "SubnetAz2Id": {
            "Fn::GetAtt": [
              "InternalSubnetsNestedStack",
              "Outputs.InternalSubnetAz2Id"
            ]
          },
          "SubnetAz3Id": {
            "Fn::If": [
              "3AzCondition",
              {
                "Fn::GetAtt": [
                  "InternalSubnetsNestedStack",
                  "Outputs.InternalSubnetAz3Id"
                ]
              },
              ""
            ]
          },
          "SubnetAz4Id": {
            "Fn::If": [
              "4AzCondition",
              {
                "Fn::GetAtt": [
                  "InternalSubnetsNestedStack",
                  "Outputs.InternalSubnetAz4Id"
                ]
              },
              ""
            ]
          },
          "NumberOfAzs": {
            "Ref": "NumberOfAzs"
          },
          "VpcName": {
            "Ref": "VpcName"
          }
        },
        "TimeoutInMinutes": "5"
      }
    },
    "RDSDBPrivateSubnetGroupNestedStack": {
      "DependsOn": "PrivateSubnetsNestedStack",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "S3Bucket"
                ]
              },
              ".s3.amazonaws.com",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "RDSDBSubnetGroupNestedStackS3Key"
                ]
              }
            ]
          ]
        },
        "Parameters": {
          "SubnetAz1Id": {
            "Fn::GetAtt": [
              "PrivateSubnetsNestedStack",
              "Outputs.PrivateSubnetAz1Id"
            ]
          },
          "SubnetAz2Id": {
            "Fn::GetAtt": [
              "PrivateSubnetsNestedStack",
              "Outputs.PrivateSubnetAz2Id"
            ]
          },
          "SubnetAz3Id": {
            "Fn::If": [
              "3AzCondition",
              {
                "Fn::GetAtt": [
                  "PrivateSubnetsNestedStack",
                  "Outputs.PrivateSubnetAz3Id"
                ]
              },
              ""
            ]
          },
          "SubnetAz4Id": {
            "Fn::If": [
              "4AzCondition",
              {
                "Fn::GetAtt": [
                  "PrivateSubnetsNestedStack",
                  "Outputs.PrivateSubnetAz4Id"
                ]
              },
              ""
            ]
          },
          "NumberOfAzs": {
            "Ref": "NumberOfAzs"
          },
          "VpcName": {
            "Ref": "VpcName"
          }
        },
        "TimeoutInMinutes": "5"
      }
    },
    "RedshiftClusterInternalSubnetGroupNestedStack": {
      "Condition": "3NetworkTierCondition",
      "DependsOn": "PrivateSubnetsNestedStack",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "S3Bucket"
                ]
              },
              ".s3.amazonaws.com",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "RedshiftClusterSubnetGroupNestedStackS3Key"
                ]
              }
            ]
          ]
        },
        "Parameters": {
          "SubnetAz1Id": {
            "Fn::GetAtt": [
              "InternalSubnetsNestedStack",
              "Outputs.InternalSubnetAz1Id"
            ]
          },
          "SubnetAz2Id": {
            "Fn::GetAtt": [
              "InternalSubnetsNestedStack",
              "Outputs.InternalSubnetAz2Id"
            ]
          },
          "SubnetAz3Id": {
            "Fn::If": [
              "3AzCondition",
              {
                "Fn::GetAtt": [
                  "InternalSubnetsNestedStack",
                  "Outputs.InternalSubnetAz3Id"
                ]
              },
              ""
            ]
          },
          "SubnetAz4Id": {
            "Fn::If": [
              "4AzCondition",
              {
                "Fn::GetAtt": [
                  "InternalSubnetsNestedStack",
                  "Outputs.InternalSubnetAz4Id"
                ]
              },
              ""
            ]
          },
          "NumberOfAzs": {
            "Ref": "NumberOfAzs"
          }
        },
        "TimeoutInMinutes": "5"
      }
    },
    "RedshiftClusterPrivateSubnetGroupNestedStack": {
      "DependsOn": "PrivateSubnetsNestedStack",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "S3Bucket"
                ]
              },
              ".s3.amazonaws.com",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "RedshiftClusterSubnetGroupNestedStackS3Key"
                ]
              }
            ]
          ]
        },
        "Parameters": {
          "SubnetAz1Id": {
            "Fn::GetAtt": [
              "PrivateSubnetsNestedStack",
              "Outputs.PrivateSubnetAz1Id"
            ]
          },
          "SubnetAz2Id": {
            "Fn::GetAtt": [
              "PrivateSubnetsNestedStack",
              "Outputs.PrivateSubnetAz2Id"
            ]
          },
          "SubnetAz3Id": {
            "Fn::If": [
              "3AzCondition",
              {
                "Fn::GetAtt": [
                  "PrivateSubnetsNestedStack",
                  "Outputs.PrivateSubnetAz3Id"
                ]
              },
              ""
            ]
          },
          "SubnetAz4Id": {
            "Fn::If": [
              "4AzCondition",
              {
                "Fn::GetAtt": [
                  "PrivateSubnetsNestedStack",
                  "Outputs.PrivateSubnetAz4Id"
                ]
              },
              ""
            ]
          },
          "NumberOfAzs": {
            "Ref": "NumberOfAzs"
          }
        },
        "TimeoutInMinutes": "5"
      }
    },
    "RedshiftClusterPublicSubnetGroupNestedStack": {
      "DependsOn": "PublicSubnetsNestedStack",
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "S3Bucket"
                ]
              },
              ".s3.amazonaws.com",
              {
                "Fn::FindInMap": [
                  "Static",
                  "All",
                  "RedshiftClusterSubnetGroupNestedStackS3Key"
                ]
              }
            ]
          ]
        },
        "Parameters": {
          "SubnetAz1Id": {
            "Fn::GetAtt": [
              "PublicSubnetsNestedStack",
              "Outputs.PublicSubnetAz1Id"
            ]
          },
          "SubnetAz2Id": {
            "Fn::GetAtt": [
              "PublicSubnetsNestedStack",
              "Outputs.PublicSubnetAz2Id"
            ]
          },
          "SubnetAz3Id": {
            "Fn::If": [
              "3AzCondition",
              {
                "Fn::GetAtt": [
                  "PublicSubnetsNestedStack",
                  "Outputs.PublicSubnetAz3Id"
                ]
              },
              ""
            ]
          },
          "SubnetAz4Id": {
            "Fn::If": [
              "4AzCondition",
              {
                "Fn::GetAtt": [
                  "PublicSubnetsNestedStack",
                  "Outputs.PublicSubnetAz4Id"
                ]
              },
              ""
            ]
          },
          "NumberOfAzs": {
            "Ref": "NumberOfAzs"
          }
        },
        "TimeoutInMinutes": "5"
      }
    }
  },
  "Outputs": {
    "VpcCidr": {
      "Description": "VPC CIDR",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-VpcCidr"
        }
      },
      "Value": {
        "Fn::FindInMap": [
          "Vpc",
          {
            "Ref": "VpcName"
          },
          "VpcCidr"
        ]
      }
    },
    "VpcId": {
      "Description": "VPC ID",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-VpcId" 
        }
      },      
      "Value": {
        "Ref": "Vpc"
      }
    },
    "InternalSubnetAz1Cidr": {
      "Condition": "3NetworkTierCondition",
      "Description": "Internal subnet 1 CIDR in Availability Zone 1",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-InternalSubnetAz1Cidr"
        }
      }, 
      "Value": {
        "Fn::GetAtt": [
          "InternalSubnetsNestedStack",
          "Outputs.InternalSubnetAz1Cidr"
        ]
      }
    },
    "InternalSubnetAz1Id": {
      "Condition": "3NetworkTierCondition",
      "Description": "Internal subnet 1 ID in Availability Zone 1",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-InternalSubnetAz1Id"
        }
      },  
      "Value": {
        "Fn::GetAtt": [
          "InternalSubnetsNestedStack",
          "Outputs.InternalSubnetAz1Id"
        ]
      }
    },
    "InternalSubnetAz2Cidr": {
      "Condition": "3NetworkTierCondition",
      "Description": "Internal subnet 2 CIDR in Availability Zone 2",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-InternalSubnetAz2Cidr"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "InternalSubnetsNestedStack",
          "Outputs.InternalSubnetAz2Cidr"
        ]
      }
    },
    "InternalSubnetAz2Id": {
      "Condition": "3NetworkTierCondition",
      "Description": "Internal subnet 2 ID in Availability Zone 2",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-InternalSubnetAz2Id"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "InternalSubnetsNestedStack",
          "Outputs.InternalSubnetAz2Id"
        ]
      }
    },
    "InternalSubnetAz3Cidr": {
      "Condition": "3NetworkTierAnd3AzCondition",
      "Description": "Internal subnet 3 CIDR in Availability Zone 3",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-InternalSubnetAz3Cidr"
        }
      }, 
      "Value": {
        "Fn::GetAtt": [
          "InternalSubnetsNestedStack",
          "Outputs.InternalSubnetAz3Cidr"
        ]
      }
    },
    "InternalSubnetAz3Id": {
      "Condition": "3NetworkTierAnd3AzCondition",
      "Description": "Internal subnet 3 ID in Availability Zone 3",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-InternalSubnetAz3Id"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "InternalSubnetsNestedStack",
          "Outputs.InternalSubnetAz3Id"
        ]
      }
    },
    "InternalSubnetAz4Cidr": {
      "Condition": "3NetworkTierAnd4AzCondition",      
      "Description": "Internal subnet 4 CIDR in Availability Zone 4",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-InternalSubnetAz4Cidr"
        }
      }, 
      "Value": {
        "Fn::GetAtt": [
          "InternalSubnetsNestedStack",
          "Outputs.InternalSubnetAz4Cidr"
        ]
      }
    },
    "InternalSubnetAz4Id": {
      "Condition": "3NetworkTierAnd4AzCondition",
      "Description": "Internal subnet 4 ID in Availability Zone 4",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-InternalSubnetAz4Id"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "InternalSubnetsNestedStack",
          "Outputs.InternalSubnetAz4Id"
        ]
      }
    },
    "PrivateSubnetAz1Cidr": {
      "Description": "Private subnet 1 CIDR in Availability Zone 1",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-PrivateSubnetAz1Cidr"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "PrivateSubnetsNestedStack",
          "Outputs.PrivateSubnetAz1Cidr"
        ]
      }
    },
    "PrivateSubnetAz1Id": {
      "Description": "Private subnet 1 ID in Availability Zone 1",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-PrivateSubnetAz1Id"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "PrivateSubnetsNestedStack",
          "Outputs.PrivateSubnetAz1Id"
        ]
      }
    },
    "PrivateSubnetAz2Cidr": {
      "Description": "Private subnet 2 CIDR in Availability Zone 2",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-PrivateSubnetAz2Cidr"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "PrivateSubnetsNestedStack",
          "Outputs.PrivateSubnetAz2Cidr"
        ]
      }
    },
    "PrivateSubnetAz2Id": {
      "Description": "Private subnet 2 ID in Availability Zone 2",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-PrivateSubnetAz2Id"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "PrivateSubnetsNestedStack",
          "Outputs.PrivateSubnetAz2Id"
        ]
      }
    },
    "PrivateSubnetAz3Cidr": {
      "Condition": "3AzCondition",
      "Description": "Private subnet 3 CIDR in Availability Zone 3",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-PrivateSubnetAz3Cidr"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "PrivateSubnetsNestedStack",
          "Outputs.PrivateSubnetAz3Cidr"
        ]
      }
    },
    "PrivateSubnetAz3Id": {
      "Condition": "3AzCondition",
      "Description": "Private subnet 3 ID in Availability Zone 3",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-PrivateSubnetAz3Id"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "PrivateSubnetsNestedStack",
          "Outputs.PrivateSubnetAz3Id"
        ]
      }
    },
    "PrivateSubnetAz4Cidr": {
      "Condition": "4AzCondition",      
      "Description": "Private subnet 4 CIDR in Availability Zone 4",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-PrivateSubnetAz4Cidr"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "PrivateSubnetsNestedStack",
          "Outputs.PrivateSubnetAz4Cidr"
        ]
      }
    },
    "PrivateSubnetAz4Id": {
      "Condition": "4AzCondition",
      "Description": "Private subnet 4 ID in Availability Zone 4",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-PrivateSubnetAz4Id"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "PrivateSubnetsNestedStack",
          "Outputs.PrivateSubnetAz4Id"
        ]
      }
    },
    "PrivateSubnetAz1RouteTableId": {
      "Description": "Private Subnet 1 Route Table ID",
      "Value": {
        "Fn::GetAtt": [
          "PrivateSubnetsNestedStack",
          "Outputs.PrivateSubnetAz1RouteTableId"
        ]
      }
    },
    "PrivateSubnetAz2RouteTableId": {
      "Description": "Private Subnet 2 Route Table ID",
      "Value": {
        "Fn::GetAtt": [
          "PrivateSubnetsNestedStack",
          "Outputs.PrivateSubnetAz2RouteTableId"
        ]
      }
    },
    "PrivateSubnetAz3RouteTableId": {
      "Condition": "3AzCondition",
      "Description": "Private Subnet 3 Route Table ID",
      "Value": {
        "Fn::GetAtt": [
          "PrivateSubnetsNestedStack",
          "Outputs.PrivateSubnetAz3RouteTableId"
        ]
      }
    },
    "PrivateSubnetAz4RouteTableId": {
      "Condition": "4AzCondition",
      "Description": "External Private Subnet 4 Route Table ID",
      "Value": {
        "Fn::GetAtt": [
          "PrivateSubnetsNestedStack",
          "Outputs.PrivateSubnetAz4RouteTableId"
        ]
      }
    },
    "PublicSubnetAz1Cidr": {
      "Description": "Public subnet 1 CIDR in Availability Zone 1",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-PublicSubnetAz1Cidr"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "PublicSubnetsNestedStack",
          "Outputs.PublicSubnetAz1Cidr"
        ]
      }
    },
    "PublicSubnetAz1Id": {
      "Description": "Public subnet 1 ID in Availability Zone 1",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-PublicSubnetAz1Id"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "PublicSubnetsNestedStack",
          "Outputs.PublicSubnetAz1Id"
        ]
      }
    },
    "PublicSubnetAz2Cidr": {
      "Description": "Public subnet 2 CIDR in Availability Zone 2",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-PublicSubnetAz2Cidr"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "PublicSubnetsNestedStack",
          "Outputs.PublicSubnetAz2Cidr"
        ]
      }
    },
    "PublicSubnetAz2Id": {
      "Description": "Public subnet 2 ID in Availability Zone 2",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-PublicSubnetAz2Id"
        }
      }, 
      "Value": {
        "Fn::GetAtt": [
          "PublicSubnetsNestedStack",
          "Outputs.PublicSubnetAz2Id"
        ]
      }
    },
    "PublicSubnetAz3Cidr": {
      "Condition": "3AzCondition",
      "Description": "Public subnet 3 CIDR in Availability Zone 3",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-PublicSubnetAz3Cidr"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "PublicSubnetsNestedStack",
          "Outputs.PublicSubnetAz3Cidr"
        ]
      }
    },
    "PublicSubnetAz3Id": {
      "Condition": "3AzCondition",
      "Description": "Public subnet 3 ID in Availability Zone 3",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-PublicSubnetAz3Id"
        }
      }, 
      "Value": {
        "Fn::GetAtt": [
          "PublicSubnetsNestedStack",
          "Outputs.PublicSubnetAz3Id"
        ]
      }
    },
    "PublicSubnetAz4Cidr": {
      "Condition": "4AzCondition",
      "Description": "Public subnet 4 CIDR in Availability Zone 4",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-PublicSubnetAz4Cidr"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "PublicSubnetsNestedStack",
          "Outputs.PublicSubnetAz4Cidr"
        ]
      }
    },
    "PublicSubnetAz4Id": {
      "Condition": "4AzCondition",
      "Description": "Public subnet 4 ID in Availability Zone 4",
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::Region}-${AWS::StackName}-PublicSubnetAz1Id"
        }
      },
      "Value": {
        "Fn::GetAtt": [
          "PublicSubnetsNestedStack",
          "Outputs.PublicSubnetAz4Id"
        ]
      }
    },
    "NATGateway1Id": {
      "Description": "NAT Gateway 1 ID in Availability Zone 1",
      "Value": {
        "Fn::GetAtt": [
          "PublicSubnetsNestedStack",
          "Outputs.NATGateway1Id"
        ]
      }
    },
    "NATGateway2Id": {
      "Description": "NAT Gateway 2 ID in Availability Zone 2",
      "Value": {
        "Fn::GetAtt": [
          "PublicSubnetsNestedStack",
          "Outputs.NATGateway2Id"
        ]
      }
    },
    "NATGateway3Id": {
      "Condition": "3AzCondition",
      "Description": "NAT Gateway 3 ID in Availability Zone 3",
      "Value": {
        "Fn::GetAtt": [
          "PublicSubnetsNestedStack",
          "Outputs.NATGateway3Id"
        ]
      }
    },
    "NATGateway4Id": {
      "Condition": "4AzCondition",
      "Description": "NAT Gateway 4 ID in Availability Zone 4",
      "Value": {
        "Fn::GetAtt": [
          "PublicSubnetsNestedStack",
          "Outputs.NATGateway4Id"
        ]
      }
    }
  }
}
